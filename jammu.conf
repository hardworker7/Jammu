<?php

	include_once 'jammu-instance'; // provides JammuI possibilities

	class Jammu
	{
		
		function __construct()
		{
			# code...
		}

		public function onMessage (stdClass $message)
		{
			# do something with the incoming message
			# message-> : address, body, date_sent, date, service_center

			JammuI::say("Message reçu du ".$message->address);

			if (preg_match("#OGI_[0-9]{8}_[0-9]{8}#", $message->body)) {
				$results = $this->ogi($message->body);
				$text = "Prochaine Menstrues: ".$results->begin.
						"\nDebut de periode fertile: ".$results->redStarts.
						"\nFin de periode fertile: ".$results->redEnds;

				JammuI::sendMessage((object)[
					"address" => $message->address,
					"body" => $text
				]);
				
				JammuI::say($text);
			}
			else if (preg_match("#OGI_AIDE#", $message->body)) {
				$text = "Envoyez OGI_jjmmyyy_JJMMYYY\n".
						"jjmmyyy: la date de vos recentes mentrues\n".
						"JJMMYYY: la date des avant-dernières mentrues\n".
						"Exemple: OGI_28012017_01012017";

				JammuI::sendMessage((object)[
					"address" => $message->address,
					"body" => $text
				]);

				JammuI::say($text);
			}
		}

		public function onSend ($messages)
		{
			# do something when message is sent
			/*
			* Some code lines
			*/
			// exec("vlc");
			JammuI::say("Reponse bien envoyée au ".$message->address);
		}

		public function ogi($txt)
		{
			// OGI_21121994_23072017
			$debut1 = $txt[4].$txt[5].'/'.$txt[6].$txt[7].'/'.$txt[8].$txt[9].$txt[10].$txt[11];
			$debut2 = $txt[13].$txt[14].'/'.$txt[15].$txt[16].'/'.$txt[17].$txt[18].$txt[19].$txt[20];

			$debut1 = strtotime(str_replace('/', '-', $debut1));
			$debut2 = strtotime(str_replace('/', '-', $debut2));

			$interval = $debut2 - $debut1;

			$nextStarts = date("d/m/Y", ($debut2 + $interval));
			$nextRedStarts = date("d/m/Y", ($debut2 + $this->calcTimeStamp(10)));
			$nextRedends = date("d/m/Y", ($debut2 + $this->calcTimeStamp(18)));

			return ((object) ["begin" => $nextStarts, "redStarts" => $nextRedStarts, "redEnds" => $nextRedends]);
		}

		private function calcTimeStamp($days)
		{
			return $days * 24 * 60 * 60;
		}

	}