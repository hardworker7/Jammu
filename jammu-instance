<?php

	/**
	* 
	*/
	class JammuI
	{

		function __construct()
		{
			# code...
		}

		/**
		*	sendMessage
		*	@param Std::class object {address, body}
		*/
		static function sendMessage($message)
		{
			// getting pending message
			$js = json_decode(file_get_contents('tosend.json'), true);
			// adding new coming
			$js[] = ["address" => $message->address, "body" => $message->body];
			// save
			if (!file_put_contents('tosend.json', json_encode($js))) {
				throw new Exception("Erreur JAMMU 101", 1);
			}
		}

		/**
		*	say
		*	@param String text
		*/
		static function say($text, $brk=true)
		{
			echo $text.($brk ? "\n" : '');
		}

		/**
		*	exec
		*	@param String command
		*/
		static function exec($command)
		{
			if (preg_match("#exec:#", $command)) {
				$command = explode('exec:', $command);
				$command = trim($command[1]);
				return exec($command." &");
			}
			else {
				throw new Exception("Invalid command execution syntax", 1);
			}
		}

		/**
		*	save
		*	@param StdClass message
		*/
		static function save($message)
		{
			try{
				$bd = self::getDbInstance();

				$q = $bd->prepare("INSERT INTO messages(address, body, send_date) VALUES(:address, :body, :send_date)");
				$q->execute([
					"address" => $message->address,
					"body" => $message->body,
					"send_date" => date("d/m/Y H:i")
				]);

				$q->closeCursor();
			} 
			catch(Exception $e){
				die('Erreur : '.$e->getMessage()) ;
			}
		}

		/**
		*	getDbInstance
		*/
		static function getDbInstance()
		{
			try {
				$configs = self::loadConfigs();
				$pdo_options[PDO::ATTR_ERRMODE] = PDO::ERRMODE_EXCEPTION ;
				$db = new PDO('mysql:dbname='.$configs->database.'; host='.$configs->hostname, $configs->username, $configs->password, $pdo_options) ;
				$db->exec("set names ".$configs->dbcharset);

				return $db;
			} catch (Exception $e) {
				return false;
			}
		}

		/**
		*	cleanMessages
		*	@param String cached: where would you like to remove messages ? database or file ?
		*/
		static function cleanMessages($cached)
		{
			switch ($cached) {
				case 'file':
					return file_put_contents('messages.json', '[]');
					break;
				
				case 'db':
					try {
						$db = self::getDbInstance();
						$db->exec('DELETE FROM messages');
					} catch (Exception $e) {
						die("An error occured !");
					}
					break;
			}
		}

		static function loadConfigs()
		{
			return (object) json_decode(file_get_contents('config.json'), true);
		}

		/**
		*	toServer
		*	@param String url
		*	@param Array values
		*	@param String type
		*/
		static function toServer($url, $values=[], $type='get')
		{
			$q = curl_init();

			$url .= (strtolower($type) == "get") ? http_build_query($values) : '';

			curl_setopt($q, CURLOPT_URL, $url);

			if (strtolower($type) == "post") {
				curl_setopt($q, CURLOPT_POST, 1);
				curl_setopt($q, CURLOPT_POSTFIELDS, http_build_query($values));
			}

			curl_setopt($q, CURLOPT_RETURNTRANSFER, 1);

			$response = curl_exec($q);

			curl_close($q);

			return $response;
		}
	}